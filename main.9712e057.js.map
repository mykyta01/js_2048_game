{"version":3,"sources":["scripts/main.js"],"names":["board","button","document","querySelector","startMessage","scoreText","table","winMessage","loseMessage","score","rows","columns","filterZero","row","filter","num","compareArr","prevBoard","boards","JSON","stringify","slide","newRow","i","length","push","movedLeft","parse","r","setTwo","renderField","movedUp","c","movedRight","reverse","movedDown","hasEmptyTile","found","Math","floor","random","cells","className","classList","add","textContent","youWin","j","gameOver","field","size","currentCell","checkUp","checkDown","checkLeft","checkRight","addEventListener","contains","remove","e","key"],"mappings":"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","file":"main.9712e057.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('.button');\nconst startMessage = document.querySelector('.message-start');\nconst scoreText = document.querySelector('.game-score');\nconst table = document.querySelector('.game-field');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\n\nlet board;\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.textContent = 'Restart';\n    startMessage.classList.add('hidden');\n  } else {\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n  };\n\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  score = 0;\n  scoreText.textContent = score;\n\n  setTwo();\n  setTwo();\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowLeft':\n      movedLeft();\n      break;\n\n    case 'ArrowRight':\n      movedRight();\n      break;\n\n    case 'ArrowUp':\n      movedUp();\n      break;\n\n    case 'ArrowDown':\n      movedDown();\n      break;\n  }\n\n  if (gameOver(board)) {\n    loseMessage.classList.remove('hidden');\n  }\n\n  if (youWin()) {\n    winMessage.classList.remove('hidden');\n  }\n\n  scoreText.textContent = score;\n});\n\nfunction filterZero(row) {\n  return row.filter(num => num);\n}\n\nfunction compareArr(prevBoard, boards) {\n  return JSON.stringify(prevBoard) !== JSON.stringify(boards);\n};\n\nfunction slide(row) {\n  let newRow = row;\n\n  newRow = filterZero(newRow);\n\n  for (let i = 0; i < newRow.length - 1; i++) {\n    if (newRow[i] === newRow[i + 1]) {\n      newRow[i] *= 2;\n      newRow[i + 1] = 0;\n      score += newRow[i];\n    }\n  }\n  newRow = filterZero(newRow);\n\n  while (newRow.length < columns) {\n    newRow.push(0);\n  }\n\n  return newRow;\n}\n\nfunction movedLeft() {\n  const prevBoard = JSON.parse(JSON.stringify(board));\n\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row = slide(row);\n    board[r] = row;\n  };\n\n  if (compareArr(prevBoard, board)) {\n    setTwo();\n  }\n\n  renderField();\n}\n\nfunction movedUp() {\n  const prevBoard = JSON.parse(JSON.stringify(board));\n\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row = slide(row);\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n    };\n  };\n\n  if (compareArr(prevBoard, board)) {\n    setTwo();\n  }\n\n  renderField();\n}\n\nfunction movedRight() {\n  const prevBoard = JSON.parse(JSON.stringify(board));\n\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row.reverse();\n    row = slide(row);\n\n    row.reverse();\n    board[r] = row;\n  };\n\n  if (compareArr(prevBoard, board)) {\n    setTwo();\n  }\n\n  renderField();\n}\n\nfunction movedDown() {\n  const prevBoard = JSON.parse(JSON.stringify(board));\n\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = row[r];\n    };\n  };\n\n  if (compareArr(prevBoard, board)) {\n    setTwo();\n  }\n\n  renderField();\n}\n\nfunction setTwo() {\n  if (!hasEmptyTile()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      board[r][c] = 2;\n      renderField();\n\n      found = true;\n    }\n  }\n}\n\nfunction hasEmptyTile() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction renderField() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      table.rows[r].cells[c].className = '';\n      table.rows[r].cells[c].classList.add('field-cell');\n      table.rows[r].cells[c].classList.add(`field-cell--${board[r][c]}`);\n      table.rows[r].cells[c].textContent = board[r][c] || '';\n    }\n  }\n};\n\nfunction youWin() {\n  for (let i = 0; i < board[0].length; i++) {\n    for (let j = 0; j < board.length; j++) {\n      if (board[i][j] === 2048) {\n        return true;\n      }\n    }\n  }\n}\n\nfunction gameOver(field) {\n  const size = field.length;\n\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size; c++) {\n      if (board[r][c] === 0) {\n        return false;\n      }\n    }\n  }\n\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size; c++) {\n      const currentCell = field[r][c];\n\n      const checkUp = r > 0 && field[r - 1][c] === currentCell;\n      const checkDown = r < size - 1 && field[r + 1][c] === currentCell;\n      const checkLeft = c > 0 && field[r][c - 1] === currentCell;\n      const checkRight = c < size - 1 && field[r][c + 1] === currentCell;\n\n      if (checkDown || checkUp || checkLeft || checkRight) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n"]}